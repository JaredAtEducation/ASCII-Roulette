import curses
import time

#image = [imagelst, colourlst]
def Menu(title, image, txt, extra, classes, color='white'):
  def character(stdscr,):
    curses.curs_set(0)
    attributes = {}
    icol = {
      1:'red',
      2:'green',
      3:'yellow',
      4:'blue',
      5:'magenta',
      6:'cyan',
      7:'white'
    }
    col = {v: k for k, v in icol.items()}


    bc = curses.COLOR_BLACK

    curses.init_pair(1, 7, bc)
    attributes['normal'] = curses.color_pair(1)

    curses.init_pair(2, col[color], bc)
    attributes['highlighted'] = curses.color_pair(2)

    curses.init_pair(3, 2, bc)
    attributes['green'] = curses.color_pair(3)

    c = 0
    option = 0
    while c != 10:
        stdscr.erase()
        
        stdscr.addstr(f"{title}\n", curses.color_pair(2))
        try:
            z = 0
            for y in range(0, len(image[0])):
                for x in range(0, len(image[0][y])):
                    if y == image[1][z][0] and x == image[1][z][1]:
                        stdscr.addstr(f"{image[0][y][x]}", attributes[image[1][z][2]])
                        if z != len(image[1])-1:
                            z += 1
                    else:
                        stdscr.addstr(f"{image[0][y][x]}", attributes['normal'])
        except:
            pass
        try:
            for i in range(0, len(txt)):
                stdscr.addstr(f"{txt[i][0]}", attributes[txt[i][1]])
            stdscr.addstr(f"{extra[0]}\n", attributes[extra[1]])

            for i in range(len(classes)):
                if i == option:
                    attr = attributes['highlighted']
                else:
                    attr = attributes['normal']
                stdscr.addstr(f'{classes[i]} > \n' , attr)
        except:
            pass
        try:
            stdscr.addstr(image[2][image[3]][0] + 1, image[2][image[3]][1], "●", attributes["normal"])
        except:
            pass
        c = stdscr.getch()

        if c == curses.KEY_UP and option > 0:
            option -= 1
        elif c == curses.KEY_DOWN and option < len(classes) - 1:
            option += 1
    return option
  return curses.wrapper(character)

def Enter(title, image, txt, prompt, color = "blue", maxlen = 8):
    def textbox(stdscr,):
        curses.curs_set(1)
        curses.noecho()
        curses.cbreak()
        stdscr.keypad(True)
        attributes = {}
        icol = {
        1:'red',
        2:'green',
        3:'yellow',
        4:'blue',
        5:'magenta',
        6:'cyan',
        7:'white'
        }
        col = {v: k for k, v in icol.items()}


        bc = curses.COLOR_BLACK

        curses.init_pair(1, 7, bc)
        attributes['normal'] = curses.color_pair(1)

        curses.init_pair(2, col[color], bc)
        attributes['highlighted'] = curses.color_pair(2)

        curses.init_pair(3, 2, bc)
        attributes['green'] = curses.color_pair(3)
        stdscr.keypad(1)

        text = ""
        while True:
            stdscr.erase()
            stdscr.addstr(f"{title}\n", attributes['highlighted'])
            try:
                z = 0
                for y in range(0, len(image[0])):
                    for x in range(0, len(image[0][y])):
                        if y == image[1][z][0] and x == image[1][z][1]:
                            stdscr.addstr(f"{image[0][y][x]}", attributes[image[1][z][2]])
                            if z != len(image[1])-1:
                                z += 1
                        else:
                            stdscr.addstr(f"{image[0][y][x]}", attributes['normal'])
            except:
                pass
            try:
                for i in range(0, len(txt)):
                    stdscr.addstr(f"{txt[i][0]}", attributes[txt[i][1]])
                stdscr.addstr(f"{prompt}: ", attributes['normal'])

                stdscr.addstr(text, attributes['normal'])
                stdscr.refresh()
            except:
                pass
            
            ch = stdscr.getch()
            if ch in (10, 13): break # enter
            elif ch in (8, 127): # backspace
                if len(text) > 0:
                    text = text[:-1]
            elif 32 <= ch <= 126:
                if len(text) < maxlen:
                    text += chr(ch)
        return text
    return curses.wrapper(textbox)



def Img(title, image, number, color = "blue"):
    def imgcr(stdscr,):
        curses.noecho()
        curses.cbreak()
        curses.curs_set(0)
        stdscr.keypad(True)
        attributes = {}
        icol = {
        1:'red',
        2:'green',
        3:'yellow',
        4:'blue',
        5:'magenta',
        6:'cyan',
        7:'white'
        }
        col = {v: k for k, v in icol.items()}

        bc = curses.COLOR_BLACK

        curses.init_pair(1, 7, bc)
        attributes['normal'] = curses.color_pair(1)

        curses.init_pair(2, col[color], bc)
        attributes['highlighted'] = curses.color_pair(2)

        curses.init_pair(3, 2, bc)
        attributes['green'] = curses.color_pair(3)
        stdscr.keypad(1)
        count = 0
        endnum = 0
        flashtimes = 0
        while True:
            stdscr.clear()
            stdscr.addstr(f"{title}\n", attributes['highlighted'])
            try:
                z = 0
                for y in range(0, len(image[0])):
                    for x in range(0, len(image[0][y])):
                        if y == image[1][z][0] and x == image[1][z][1]:
                            stdscr.addstr(f"{image[0][y][x]}", attributes[image[1][z][2]])
                            if z != len(image[1])-1:
                                z += 1
                        else:
                            stdscr.addstr(f"{image[0][y][x]}", attributes['normal'])
                endnum += 1
                if endnum >= 74 + number:
                    flashtimes += 1
                    if flashtimes % 2 == 0:
                        stdscr.addstr(image[2][count][0] + 1, image[2][count][1], "●", attributes["normal"])
                    else:
                        stdscr.addstr(image[2][count][0] + 1, image[2][count][1], "#", attributes["normal"])
                    time.sleep(0.2)
                else:
                    if count <= 36:
                        count+=1
                    if count > 36:
                        count = 0
                    stdscr.addstr(image[2][count][0] + 1, image[2][count][1], "●", attributes["normal"])

                if flashtimes == 8:
                    break
            except:
                pass
            stdscr.nodelay(True)
            stdscr.getch()
            time.sleep(0.1)
    return curses.wrapper(imgcr)

#Menu('hello', [['hello\n', 'normal']], 'eee', ['$1', '$5', '$10', '$50', '$100', '$500', '-Escape-'], 'blue')
#numb = numberList.index(20) + 1
#Img("Roulette", [Wheel, WheelColours, BallLocs], numb)
